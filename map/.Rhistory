# Salaries data
data("Salaries")
viz4 <- ggplot(Salaries,
aes(x = rank,
y = salary,
color = rank,
text = paste("Discipline:", discipline))) +
geom_boxplot(size = 1,                         # size of the box plot
outlier.shape = 1,                # shape of the outlier
outlier.color = "black",          # color of the outlier
outlier.size  = 3) +              # size of the outlier
geom_jitter(alpha = 0.5,
width = .2) +
scale_y_continuous(label = dollar) +
labs(title = "Academic Salary by Rank",
subtitle = "9-month salary for 2008-2009",
x = "",
y = "") +
theme_minimal() +
theme(legend.position = "none")
library(googleVis)     # The googleVis package provides an interface between R and the Google's charts tools. It allows users to create web pages with interactive charts based on R data frames
library(rgl)           # 3d interactive graphics
library(Rcmdr)         # A platform-independent basic statistics GUI (graphical user interface)
library(plotly)        # Plotly's R graphing library makes interactive, publication-quality graphs.
library(rbokeh)        # A native R plotting library that provides a flexible declarative interface for creating interactive web-based graphics
library(networkD3)     # D3 JavaScript Network Graphs from R
library(reshape2)      # Flexibly restructure and aggregate data using just two functions: melt
#================================================================================#
#================================================================================#
#=========================== INTERACTIVE PLOT ===================================#
#================================================================================#
#================================================================================#
#================================================================================#
#------------------------------ THE ENVIRONMENT ---------------------------------#
# Clear the environment
rm(list=ls())
#------------------------------ Library and Data ---------------------------------#
# install.packages("googleVis")
# install.packages("rgl")
# install.packages("Rcmdr")
# install.packages("plotly")
# install.packages("rbokeh")
# install.packages("networkD3")
# install.packages("reshape2")
library(googleVis)     # The googleVis package provides an interface between R and the Google's charts tools. It allows users to create web pages with interactive charts based on R data frames
library(rgl)           # 3d interactive graphics
library(Rcmdr)         # A platform-independent basic statistics GUI (graphical user interface)
library(plotly)        # Plotly's R graphing library makes interactive, publication-quality graphs.
library(rbokeh)        # A native R plotting library that provides a flexible declarative interface for creating interactive web-based graphics
library(networkD3)     # D3 JavaScript Network Graphs from R
library(reshape2)      # Flexibly restructure and aggregate data using just two functions: melt
data("Cars93", package = "MASS")
?Cars93
str(Cars93)
head(Cars93)
summary(Cars93)
attach(Cars93)
# Scatter plot
scatter3d(MPG.city ~ Horsepower + Weight, data = Cars93, fit = "linear",
bg = "white", axis.scales = TRUE, grid = FALSE, ellipsoid = TRUE)
# Interactive plots with Plotly
# Let's do a scatter plot with MPG.city and Horsepower
ggplot(Cars93,
aes(x = MPG.city,
y = Horsepower)) +
geom_point(colour = "red", alpha = 1/2)
# We save the plot under the viz1 object
viz1 <- ggplot(Cars93,
aes(x = MPG.city,
y = Horsepower)) +
geom_point(colour = "red", alpha = 1/2)
# Let's make it interactive
ggplotly(viz1)
# Let's try different plots
# Adding coloring to be dependent on airbags
ggplot(Cars93,
aes(x = MPG.city,
y = Horsepower,
color = AirBags)) +
geom_point()
viz2 <- ggplot(Cars93,
aes(x = MPG.city,
y = Horsepower,
color = AirBags)) +
geom_point()
ggplotly(viz2)
# Faceting by airbags
viz3 <- ggplot(Cars93,
aes(x = MPG.city,
y = Horsepower,
color = AirBags,
text = paste("Country of origin:", Origin))) +
geom_point() +
facet_wrap(~AirBags)
ggplotly(viz3)
# Salaries data
data("Salaries")
viz4 <- ggplot(Salaries,
aes(x = rank,
y = salary,
color = rank,
text = paste("Discipline:", discipline))) +
geom_boxplot(size = 1,                         # size of the box plot
outlier.shape = 1,                # shape of the outlier
outlier.color = "black",          # color of the outlier
outlier.size  = 3) +              # size of the outlier
geom_jitter(alpha = 0.5,
width = .2) +
scale_y_continuous(label = dollar) +
labs(title = "Academic Salary by Rank",
subtitle = "9-month salary for 2008-2009",
x = "",
y = "") +
theme_minimal() +
theme(legend.position = "none")
viz4 <- ggplot(Salaries,
aes(x = rank,
y = salary,
color = rank,
text = paste("Discipline:", discipline))) +
geom_boxplot(size = 1,                         # size of the box plot
outlier.shape = 1,                # shape of the outlier
outlier.color = "black",          # color of the outlier
outlier.size  = 3) +              # size of the outlier
geom_jitter(alpha = 0.5,
width = .2) +
scale_y_continuous(label = dollar) +
labs(title = "Academic Salary by Rank",
subtitle = "9-month salary for 2008-2009",
x = "",
y = "") +
theme_minimal() +
theme(legend.position = "none")
#================================================================================#
#================================================================================#
#=========================== INTERACTIVE PLOT ===================================#
#================================================================================#
#================================================================================#
#================================================================================#
#------------------------------ THE ENVIRONMENT ---------------------------------#
# Clear the environment
rm(list=ls())
#------------------------------ Library and Data ---------------------------------#
#install.packages("googleVis")
#install.packages("rgl")
#install.packages("Rcmdr")
#install.packages("plotly")
#install.packages("rbokeh")
#install.packages("networkD3")
#install.packages("reshape2")
library(googleVis)     # The googleVis package provides an interface between R and the Google's charts tools. It allows users to create web pages with interactive charts based on R data frames
library(rgl)           # 3d interactive graphics
library(Rcmdr)         # A platform-independent basic statistics GUI (graphical user interface)
library(plotly)        # Plotly's R graphing library makes interactive, publication-quality graphs.
library(rbokeh)        # A native R plotting library that provides a flexible declarative interface for creating interactive web-based graphics
library(networkD3)     # D3 JavaScript Network Graphs from R
library(reshape2)      # Flexibly restructure and aggregate data using just two functions: melt
data("Cars93", package = "MASS")
?Cars93
str(Cars93)
head(Cars93)
summary(Cars93)
attach(Cars93)
# Scatter plot
scatter3d(MPG.city ~ Horsepower + Weight, data = Cars93, fit = "linear",
bg = "white", axis.scales = TRUE, grid = FALSE, ellipsoid = TRUE)
# Interactive plots with Plotly
# Let's do a scatter plot with MPG.city and Horsepower
ggplot(Cars93,
aes(x = MPG.city,
y = Horsepower)) +
geom_point(colour = "red", alpha = 1/2)
# We save the plot under the viz1 object
viz1 <- ggplot(Cars93,
aes(x = MPG.city,
y = Horsepower)) +
geom_point(colour = "red", alpha = 1/2)
# Let's make it interactive
ggplotly(viz1)
# Let's try different plots
# Adding coloring to be dependent on airbags
ggplot(Cars93,
aes(x = MPG.city,
y = Horsepower,
color = AirBags)) +
geom_point()
viz2 <- ggplot(Cars93,
aes(x = MPG.city,
y = Horsepower,
color = AirBags)) +
geom_point()
ggplotly(viz2)
# Faceting by airbags
viz3 <- ggplot(Cars93,
aes(x = MPG.city,
y = Horsepower,
color = AirBags,
text = paste("Country of origin:", Origin))) +
geom_point() +
facet_wrap(~AirBags)
ggplotly(viz3)
# Salaries data
data("Salaries")
viz4 <- ggplot(Salaries,
aes(x = rank,
y = salary,
color = rank,
text = paste("Discipline:", discipline))) +
geom_boxplot(size = 1,                         # size of the box plot
outlier.shape = 1,                # shape of the outlier
outlier.color = "black",          # color of the outlier
outlier.size  = 3) +              # size of the outlier
geom_jitter(alpha = 0.5,
width = .2) +
scale_y_continuous(label = dollar) +
labs(title = "Academic Salary by Rank",
subtitle = "9-month salary for 2008-2009",
x = "",
y = "") +
theme_minimal() +
theme(legend.position = "none")
#------------------------------ Library and Data ---------------------------------#
install.packages("googleVis")
install.packages("rgl")
install.packages("Rcmdr")
install.packages("plotly")
install.packages("rbokeh")
install.packages("rbokeh")
install.packages("rbokeh")
install.packages("rbokeh")
install.packages("rbokeh")
install.packages("rbokeh")
install.packages("rbokeh")
install.packages("networkD3")
install.packages("reshape2")
library(googleVis)     # The googleVis package provides an interface between R and the Google's charts tools. It allows users to create web pages with interactive charts based on R data frames
library(rgl)           # 3d interactive graphics
library(Rcmdr)         # A platform-independent basic statistics GUI (graphical user interface)
library(plotly)        # Plotly's R graphing library makes interactive, publication-quality graphs.
library(rbokeh)        # A native R plotting library that provides a flexible declarative interface for creating interactive web-based graphics
library(networkD3)     # D3 JavaScript Network Graphs from R
library(reshape2)      # Flexibly restructure and aggregate data using just two functions: melt
data("Cars93", package = "MASS")
?Cars93
str(Cars93)
head(Cars93)
summary(Cars93)
attach(Cars93)
# Scatter plot
scatter3d(MPG.city ~ Horsepower + Weight, data = Cars93, fit = "linear",
bg = "white", axis.scales = TRUE, grid = FALSE, ellipsoid = TRUE)
# Interactive plots with Plotly
# Let's do a scatter plot with MPG.city and Horsepower
ggplot(Cars93,
aes(x = MPG.city,
y = Horsepower)) +
geom_point(colour = "red", alpha = 1/2)
# We save the plot under the viz1 object
viz1 <- ggplot(Cars93,
aes(x = MPG.city,
y = Horsepower)) +
geom_point(colour = "red", alpha = 1/2)
# Let's make it interactive
ggplotly(viz1)
# Let's try different plots
# Adding coloring to be dependent on airbags
ggplot(Cars93,
aes(x = MPG.city,
y = Horsepower,
color = AirBags)) +
geom_point()
viz2 <- ggplot(Cars93,
aes(x = MPG.city,
y = Horsepower,
color = AirBags)) +
geom_point()
ggplotly(viz2)
# Faceting by airbags
viz3 <- ggplot(Cars93,
aes(x = MPG.city,
y = Horsepower,
color = AirBags,
text = paste("Country of origin:", Origin))) +
geom_point() +
facet_wrap(~AirBags)
ggplotly(viz3)
# Salaries data
data("Salaries")
viz4 <- ggplot(Salaries,
aes(x = rank,
y = salary,
color = rank,
text = paste("Discipline:", discipline))) +
geom_boxplot(size = 1,                         # size of the box plot
outlier.shape = 1,                # shape of the outlier
outlier.color = "black",          # color of the outlier
outlier.size  = 3) +              # size of the outlier
geom_jitter(alpha = 0.5,
width = .2) +
scale_y_continuous(label = dollar) +
labs(title = "Academic Salary by Rank",
subtitle = "9-month salary for 2008-2009",
x = "",
y = "") +
theme_minimal() +
theme(legend.position = "none")
ggplotly(viz4)
library(googleVis)     # The googleVis package provides an interface between R and the Google's charts tools. It allows users to create web pages with interactive charts based on R data frames
library(rgl)           # 3d interactive graphics
library(Rcmdr)         # A platform-independent basic statistics GUI (graphical user interface)
library(plotly)        # Plotly's R graphing library makes interactive, publication-quality graphs.
library(rbokeh)        # A native R plotting library that provides a flexible declarative interface for creating interactive web-based graphics
library(networkD3)     # D3 JavaScript Network Graphs from R
library(reshape2)      # Flexibly restructure and aggregate data using just two functions: melt
viz4 <- ggplot(Salaries,
aes(x = rank,
y = salary,
color = rank,
text = paste("Discipline:", discipline))) +
geom_boxplot(size = 1,                         # size of the box plot
outlier.shape = 1,                # shape of the outlier
outlier.color = "black",          # color of the outlier
outlier.size  = 3) +              # size of the outlier
geom_jitter(alpha = 0.5,
width = .2) +
scale_y_continuous(label = dollar) +
labs(title = "Academic Salary by Rank",
subtitle = "9-month salary for 2008-2009",
x = "",
y = "") +
theme_minimal() +
theme(legend.position = "none")
viz4 <- ggplot(Salaries,
aes(x = rank,
y = salary,
color = rank,
text = paste("Discipline:", discipline))) +
geom_boxplot(size = 1,                         # size of the box plot
outlier.shape = 1,                # shape of the outlier
outlier.color = "black",          # color of the outlier
outlier.size  = 3) +              # size of the outlier
geom_jitter(alpha = 0.5,
width = .2) +
scale_y_continuous(label = scales::dollar_format()) +
labs(title = "Academic Salary by Rank",
subtitle = "9-month salary for 2008-2009",
x = "",
y = "") +
theme_minimal() +
theme(legend.position = "none")
ggplotly(viz4)
# Interactive plots with rbokeh
data(mtcars)
mtcars$name <- row.names(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
figure() %>%
ly_points(disp, mpg, data=mtcars,
color = cyl, glyph = cyl,
hover = list(name, mpg, wt))
# Interactive networks
nums <- unlist(lapply(Cars93, is.numeric))
data <- Cars93[nums]
corr <- cor(data)
links <- melt(corr)
# Plot all links
simpleNetwork(links, zoom = TRUE, charge=-200)
links2 <- links[links$value != 1 & links$value > 0.5,]
links2 <- links2[complete.cases(links2),]
simpleNetwork(links2, zoom = TRUE, charge=-200)
install.packages
# Call the libraries
library(googleVis)
library(methods)
library(jsonlite)
library(utils)
# Clear the environment
rm(list=ls())
# Import and define the .csv from github
# Data on countries' debt to GDP ration for different years.
# Dataset available here: https://github.com/MRostanski/r-data-analysis-101/tree/master/datasets (debt.csv)
urlfile = "https://raw.githubusercontent.com/MRostanski/r-data-analysis-101/master/datasets/debt.csv"
debt = read.csv(url(urlfile))
View(debt)
# Let's define the interactive map using gvisGeoChart.
# The location variable is the country
# The coloring scheme depends on the Debt to GDP ratio for 2010
# Once we hover, the "text" column is plotted
eurdebt <- gvisGeoChart(debt, locationvar = "Country", colorvar = "Debt_to_GDP_Ratio_2010", hovervar = "text", options = list(region = "150", width = "1200px", height ="1100px", dataMode = "regions",
colorAxis="{values:[20,40,60,80,100], colors:[\'#ACB334',\'#FAB733', \'#FF8E15',\'#FF4E11',\'#FF0D0D']}"))
plot(eurdebt)
# New data on countries' wellbeing index
# Dataset available here: https://github.com/MRostanski/r-data-analysis-101/tree/master/datasets (wellbeing.csv)
urlfile_2 = "https://raw.githubusercontent.com/MRostanski/r-data-analysis-101/master/datasets/wellbeing.csv"
wellbeing = read.csv(url(urlfile_2))
# Let's plot the map
wellbeing_plot <- gvisGeoChart(wellbeing, locationvar = "State", colorvar = "Score", hovervar = "text",  options=list(region="US", displayMode="regions", resolution="provinces", width = "1200px", height ="1100px"))
plot(wellbeing_plot)
View(wellbeing_plot)
View(wellbeing)
#------------------------------ THE ENVIRONMENT ---------------------------------#
# Clear the environment
rm(list=ls())
#------------------------------ Library and Data ---------------------------------#
install.packages("tidyverse", "waterfalls", "plotly)
library(waterfalls)
library(ggplot2)
library(plotly)
# Create a dataframe
# The information is collected from Credit Suisse's 2021 annual report available here: https://www.credit-suisse.com/about-us/en/reports-research/annual-reports.html
location <- c("Swiss Universal Bank", "International Wealth Management", "Asia Pacific", "Asset Management", "Investment Bank", "Corporate Center")
#------------------------------ Library and Data ---------------------------------#
install.packages("tidyverse", "waterfalls", "plotly)
library(waterfalls)
library(ggplot2)
library(plotly)
# Create a dataframe
# The information is collected from Credit Suisse's 2021 annual report available here: https://www.credit-suisse.com/about-us/en/reports-research/annual-reports.html
location <- c("Swiss Universal Bank", "International Wealth Management", "Asia Pacific", "Asset Management", "Investment Bank", "Corporate Center")
#------------------------------ Library and Data ---------------------------------#
install.packages("tidyverse", "waterfalls", "plotly")
#------------------------------ Library and Data ---------------------------------#
install.packages("tidyverse", "waterfalls", "plotly")
library(waterfalls)
#------------------------------ Library and Data ---------------------------------#
install.packages("tidyverse", "waterfalls", "plotly")
library(waterfalls)
library(ggplot2)
library(plotly)
# Create a dataframe
# The information is collected from Credit Suisse's 2021 annual report available here: https://www.credit-suisse.com/about-us/en/reports-research/annual-reports.html
location <- c("Swiss Universal Bank", "International Wealth Management", "Asia Pacific", "Asset Management", "Investment Bank", "Corporate Center")
expenses <- c(3.066, 2.500, 2.221, 1.156, 8.398, 1.750)
total_operating_expenses <- data.frame(location, expenses)
print(total_operating_expenses)
#Create Waterfall plot
waterfall(total_operating_expenses,
calc_total = TRUE,
fill_by_sign = TRUE,
rect_width = 0.5,
rect_text_size = 1,
total_axis_text = "Total operating expenses",
total_rect_color = "Dark Green")
# Some explainations:
# - calc_total: should the final pool of the waterfall be calculated (and placed on the chart)
# - fill_by_sign: should positive and negative values each have the same colour?
# Or check documentation:
?waterfall
# Interactive waterfall
# Let's create a new data frame
#Defining our variables for later use in the dataframe
x = c("Swiss Universal Bank", "International Wealth Management", "Asia Pacific", "Asset Management", "Investment Bank", "Corporate Center", "net revenue")
measure = c("relative", "relative", "relative", "relative", "relative", "relative", "total" )
text = c("+3.066", "+2.500", "+2.221", "+1.156", "+8.398", "+1.750", "total")
y = c(3.066, 2.500, 2.221, 1.156, 8.398, 1.750, 0)
#Creating our dataframe "data"
data = data.frame(x = factor(x, levels = x),measure, text, y)
# Defining the options for the waterfall graph and plotting it
fig <- plot_ly(data,
x = ~x,
y = ~y,
measure = ~measure,
type = "waterfall",
textposition = "outside",
text = ~text,
connector = list(line = list(color= "rgb(63, 63, 63)")))
?plot_ly
# Let's plot it
fig
library(shiny); runApp('C:/Users/Student/OneDrive - Berner Fachhochschule/S6/SBD1/Teil2/MovieBrowser.R')
runApp('C:/Users/Student/OneDrive - Berner Fachhochschule/S6/SBD1/Teil2/dashboard/dashboards')
runApp('C:/Users/Student/OneDrive - Berner Fachhochschule/S6/SBD1/Teil2/dashboard/dashboards')
runApp('C:/Users/Student/OneDrive - Berner Fachhochschule/S6/SBD1/Teil2/dashboard/dashboards')
runApp('C:/Users/Student/OneDrive - Berner Fachhochschule/S6/SBD1/Teil2/MovieBrowser.R')
runApp('C:/Users/Student/OneDrive - Berner Fachhochschule/S6/SBD1/Teil2/dashboard/dashboards')
runApp('C:/Users/Student/OneDrive - Berner Fachhochschule/S6/SBD1/Teil2/MovieBrowser.R')
runApp('C:/Users/Student/OneDrive - Berner Fachhochschule/S6/SBD1/Teil2/MovieBrowser.R')
runApp('C:/Users/Student/OneDrive - Berner Fachhochschule/S6/SBD1/Teil2/dashboard/dashboards')
runApp('C:/Users/Student/OneDrive - Berner Fachhochschule/S6/SBD1/Teil2/dashboard/dashboards')
runApp('C:/Users/Student/OneDrive - Berner Fachhochschule/S6/SBD1/Teil2/dashboard/dashboards')
runApp('C:/Users/Student/OneDrive - Berner Fachhochschule/S6/SBD1/Teil2/dashboard/dashboards')
setwd("C:/Users/Student/Hackathon/Daten-Hackdays-BE-2023/map")
load("data.rda")
runApp('C:/Users/Student/OneDrive - Berner Fachhochschule/S6/SBD1/Teil2/dashboard/dashboards')
runApp('C:/Users/Student/OneDrive - Berner Fachhochschule/S6/SBD1/Teil2/dashboard/dashboards')
runApp('C:/Users/Student/OneDrive - Berner Fachhochschule/S6/SBD1/Teil2/dashboard/dashboards')
runApp('C:/Users/Student/OneDrive - Berner Fachhochschule/S6/SBD1/Teil2/dashboard/dashboards')
runApp('C:/Users/Student/OneDrive - Berner Fachhochschule/S6/SBD1/Teil2/dashboard/dashboards')
runApp('C:/Users/Student/OneDrive - Berner Fachhochschule/S6/SBD1/Teil2/dashboard/dashboards')
runApp('C:/Users/Student/OneDrive - Berner Fachhochschule/S6/SBD1/Teil2/dashboard/dashboards')
runApp('C:/Users/Student/OneDrive - Berner Fachhochschule/S6/SBD1/Teil2/dashboard/dashboards')
runApp('C:/Users/Student/OneDrive - Berner Fachhochschule/S6/SBD1/Teil2/dashboard/dashboards')
runApp('C:/Users/Student/OneDrive - Berner Fachhochschule/S6/SBD1/Teil2/dashboard/dashboards')
runApp('C:/Users/Student/OneDrive - Berner Fachhochschule/S6/SBD1/Teil2/dashboard/dashboards')
runApp('C:/Users/Student/OneDrive - Berner Fachhochschule/S6/SBD1/Teil2/dashboard/dashboards')
runApp('C:/Users/Student/OneDrive - Berner Fachhochschule/S6/SBD1/Teil2/dashboard/dashboards')
setwd("C:/Users/Student/Hackathon/Daten-Hackdays-BE-2023")
load("Top10Words_DataFrame_with_coordinates")
read_parquet("Top10Words_DataFrame_with_coordinates.parquet")
library(arrow)
setwd("C:/Users/Student/Hackathon/Daten-Hackdays-BE-2023")
read_parquet("Top10Words_DataFrame_with_coordinates.parquet")
View(data)
data <- read_parquet("Top10Words_DataFrame_with_coordinates.parquet")
View(data)
runApp('map')
setwd("./Daten-Hackdays-BE-2023/map")
setwd("../Daten-Hackdays-BE-2023/map")
load("data.rda")
runApp()
runApp()
setwd("../Daten-Hackdays-BE-2023/map")
runApp()
